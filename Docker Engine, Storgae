Docker Engine
Docker Engine is the core component of Docker that enables you to build, run, and manage containers. 
It consists of:

Server: The long-running program (daemon) that manages containers.
REST API: A set of HTTP API endpoints that allow you to interact with the Docker daemon programmatically.
CLI (Command Line Interface): The command-line tool (e.g., docker) that allows users to interact with the Docker daemon.
Key Features of Docker Engine:

Containerization: It allows you to package applications and their dependencies into containers.
Portability: Containers can run on any system that has Docker Engine installed, making it easy to move applications across environments.
Resource Isolation: Docker Engine provides resource isolation for containers, ensuring that they don’t interfere with one another.
Docker Storage
Docker Storage refers to the mechanisms Docker uses to store images, containers, volumes, and other data. It is crucial
for maintaining data persistence and managing how data is stored and accessed.

Key Components of Docker Storage:

Images: Read-only templates used to create containers. Images are stored in a layered file system, which means that each
layer represents a change to the image.
Containers: Instances of Docker images. When you run an image, a container is created from it. Containers can have writable
layers where changes are stored.
Volumes: A preferred way to persist data generated by and used by Docker containers. Volumes are stored outside of the 
container’s filesystem and are not removed when a container is deleted. They allow for data sharing between containers 
and are managed by Docker.
Bind Mounts: A way to mount a specific file or directory from the host filesystem into a container. This allows you to
share files between the host and the container but requires careful management since the host and container file systems 
can change independently.
tmpfs Mounts: A temporary storage mechanism that allows you to mount a file or directory in memory, making it very fast
but ephemeral (data is lost when the container stops).


Here are some commands:
To create new volume:
docker volume create VOLUME_NAME

List all volume:
docker volume ls

Run a container with bind 
